# -*- coding: utf-8 -*-
"""Copy of LED-ArXiv

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TRMH8Y_IkelPlDjSefr8AnSfRwn4hBoH
"""

def dump_dataset_locally():
  from datasets import load_dataset, load_metric
  test_dataset = load_dataset("scientific_papers", "arxiv", split="test")
  import csv
  with open('summaries_dump_4k-5k.csv', 'w') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(['Abstract', 'Article'])
    for i in range(4000, 5000):
      csvwriter.writerow([test_dataset[i]['abstract'], test_dataset[i]['article']])

from transformers import LEDForConditionalGeneration, LEDTokenizer
import torch
import csv
import sys

def generate_summaries():
  article_summaries = []
  csv.field_size_limit(sys.maxsize)
  tokenizer = LEDTokenizer.from_pretrained("allenai/led-large-16384-arxiv")
  model = LEDForConditionalGeneration.from_pretrained("allenai/led-large-16384-arxiv", return_dict_in_generate=True).to("cuda")

  with open('drive/My Drive/NLP_Report/results_4000_5000_latest.csv', 'w') as csvwrite:
    csvwriter = csv.writer(csvwrite)
    csvwriter.writerow(['Index', 'Generated Summary', 'Gold Summary'])
    with open('summaries_dump_4k-5k.csv') as csvfile:
        reader = csv.reader(csvfile)
        count = 0
        for row in reader:
          count += 1
          article = row[1]
          try:
            input_ids = tokenizer(article, padding="max_length", max_length=16384,return_tensors="pt",truncation=True).input_ids.to("cuda")
            global_attention_mask = torch.zeros_like(input_ids)
            # set global_attention_mask on first token
            global_attention_mask[:, 0] = 1
            sequences = model.generate(input_ids, global_attention_mask=global_attention_mask,max_length=512, num_beams=4).sequences
            summary = tokenizer.batch_decode(sequences,skip_special_tokens=True)[0]
            print(count+4000)
            #break
            csvwriter.writerow([count+4000,summary, row[0]])
          except:
            print("error")